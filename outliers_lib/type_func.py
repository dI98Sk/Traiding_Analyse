# func to cleaning data of reasons
# func to improve names of contract
  
def get_stop(name):
    """
    Находит выбросы в данных, используя метод межквартильного размаха. 
    Классический метод модифицирован путем добавления:
    * возможности логарифмирования распредления
    * ручного управления количеством межквартильных размахов в обе стороны распределения
    Args:
        data (pandas.DataFrame): набор данных
        feature (str): имя признака, на основе которого происходит поиск выбросов
        left (float, optional): количество межквартильных размахов в левую сторону распределения. По умолчанию 1.5.
        right (float, optional): количество межквартильных размахов в правую сторону распределения. По умолчанию 1.5.
        log_scale (bool, optional): режим логарифмирования. По умолчанию False - логарифмирование не применяется.

    Returns:
        pandas.DataFrame: наблюдения, попавшие в разряд выбросов
        pandas.DataFrame: очищенные данные, из которых исключены выбросы
    """
    st_list = ['stop', 'Выбило по стопу','стоп','Stop','стоп сработал',
              'выбило по стопу','шпилтка/экстремум','клиринг снял заявку и стоп сработал',
               'смена тренда','маркет кончился срок', 'stopp','' ] #create list of stop closed
   
    if name in st_list:
        # if it is stop
        res = 'Stop'
        return res
    else:
        return name    

def get_by_hands(name):
    """
    Находит выбросы в данных, используя метод межквартильного размаха. 
    Классический метод модифицирован путем добавления:
    * возможности логарифмирования распредления
    * ручного управления количеством межквартильных размахов в обе стороны распределения
    Args:
        data (pandas.DataFrame): набор данных
        feature (str): имя признака, на основе которого происходит поиск выбросов
        left (float, optional): количество межквартильных размахов в левую сторону распределения. По умолчанию 1.5.
        right (float, optional): количество межквартильных размахов в правую сторону распределения. По умолчанию 1.5.
        log_scale (bool, optional): режим логарифмирования. По умолчанию False - логарифмирование не применяется.

    Returns:
        pandas.DataFrame: наблюдения, попавшие в разряд выбросов
        pandas.DataFrame: очищенные данные, из которых исключены выбросы
    """
    hn_list = ['закрыл вруную',' Закрыл вручную','hans',
               'закрыл в руччную','hands',
              'закрыл вруную',' Закрыл вручную','hans',
               'закрыл в руччную','hands','БЕЗ СТОПА',
               'маркет выбило по стопу, стопа не было отрастила',
              'расчет был на большую шпильку в начале недели','по рынку',
              'для др. трейда $ нужны были','по рынку, цена долго стоит',
               'контртренд был, по рынку вышла','не понятный рынок',
              'нет тенденции','по рынку',
              'не отращивала, т.к. нужны были деньги на РТС',
              'цели нужно ставить мин. До МА40',
              'пошло снижение, на вариант если это распределение','по рынку МА 40',
              'смена тренда, по рынку','цена наметила на шорт','граница диапазона','по уровню',
              'по рынку','уровни ','закрыл вручную'] #create list of hands closed
   
    if name in hn_list:
        # if it is hands
        res = 'Hands'
        return res
    else:
        return name 
    
def get_take(name):
    """
    Находит выбросы в данных, используя метод межквартильного размаха. 
    Классический метод модифицирован путем добавления:
    * возможности логарифмирования распредления
    * ручного управления количеством межквартильных размахов в обе стороны распределения
    Args:
        data (pandas.DataFrame): набор данных
        feature (str): имя признака, на основе которого происходит поиск выбросов
        left (float, optional): количество межквартильных размахов в левую сторону распределения. По умолчанию 1.5.
        right (float, optional): количество межквартильных размахов в правую сторону распределения. По умолчанию 1.5.
        log_scale (bool, optional): режим логарифмирования. По умолчанию False - логарифмирование не применяется.

    Returns:
        pandas.DataFrame: наблюдения, попавшие в разряд выбросов
        pandas.DataFrame: очищенные данные, из которых исключены выбросы
    """
    tk_list = ['take','тейк',' Тейк',
              'take','тейк',' Тейк','уровни','Маркет','МА 200','МА40','МА200',
              'тейк_Кумо','не внимательно указала цифру выхода',
              'тейк МА40','тейк_перепонка фигуры','т.Вайк.',
              'TAKE','Тейк', 'Выбило ро тейку','Тейк '] #create list of take closed
    
   
    if name in tk_list:
        # if it is take
        res = 'Take'
        return res
    else:
        return name 

    
# CALL THIS FUNC LAST, THIS CHANGES MAST BE APPLY AFTER MAIN CLEANING
def get_other(name):
    """
    Находит выбросы в данных, используя метод межквартильного размаха. 
    Классический метод модифицирован путем добавления:
    * возможности логарифмирования распредления
    * ручного управления количеством межквартильных размахов в обе стороны распределения
    Args:
        data (pandas.DataFrame): набор данных
        feature (str): имя признака, на основе которого происходит поиск выбросов
        left (float, optional): количество межквартильных размахов в левую сторону распределения. По умолчанию 1.5.
        right (float, optional): количество межквартильных размахов в правую сторону распределения. По умолчанию 1.5.
        log_scale (bool, optional): режим логарифмирования. По умолчанию False - логарифмирование не применяется.

    Returns:
        pandas.DataFrame: наблюдения, попавшие в разряд выбросов
        pandas.DataFrame: очищенные данные, из которых исключены выбросы
    """

    all_list = ['Take','Hands','Stop'] #create list of main reasons
   
    if name in all_list:
        # if it is our certain values
        return name
    else:
        return 'Other'